package zhttp.http

import io.netty.handler.codec.http.HttpHeaderNames

object HeaderName {
  val `accept`: CharSequence                           = HttpHeaderNames.ACCEPT
  val `accept-charset`: CharSequence                   = HttpHeaderNames.ACCEPT_CHARSET
  val `accept-encoding`: CharSequence                  = HttpHeaderNames.ACCEPT_ENCODING
  val `accept-language`: CharSequence                  = HttpHeaderNames.ACCEPT_LANGUAGE
  val `accept-ranges`: CharSequence                    = HttpHeaderNames.ACCEPT_RANGES
  val `accept-patch`: CharSequence                     = HttpHeaderNames.ACCEPT_PATCH
  val `access-control-allow-credentials`: CharSequence = HttpHeaderNames.ACCESS_CONTROL_ALLOW_CREDENTIALS
  val `access-control-allow-headers`: CharSequence     = HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS
  val `access-control-allow-methods`: CharSequence     = HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS
  val `access-control-allow-origin`: CharSequence      = HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN
  val `access-control-expose-headers`: CharSequence    = HttpHeaderNames.ACCESS_CONTROL_EXPOSE_HEADERS
  val `access-control-max-age`: CharSequence           = HttpHeaderNames.ACCESS_CONTROL_MAX_AGE
  val `access-control-request-headers`: CharSequence   = HttpHeaderNames.ACCESS_CONTROL_REQUEST_HEADERS
  val `access-control-request-method`: CharSequence    = HttpHeaderNames.ACCESS_CONTROL_REQUEST_METHOD
  val `age`: CharSequence                              = HttpHeaderNames.AGE
  val `allow`: CharSequence                            = HttpHeaderNames.ALLOW
  val `authorization`: CharSequence                    = HttpHeaderNames.AUTHORIZATION
  val `cache-control`: CharSequence                    = HttpHeaderNames.CACHE_CONTROL
  val `connection`: CharSequence                       = HttpHeaderNames.CONNECTION
  val `content-base`: CharSequence                     = HttpHeaderNames.CONTENT_BASE
  val `content-encoding`: CharSequence                 = HttpHeaderNames.CONTENT_ENCODING
  val `content-language`: CharSequence                 = HttpHeaderNames.CONTENT_LANGUAGE
  val `content-length`: CharSequence                   = HttpHeaderNames.CONTENT_LENGTH
  val `content-location`: CharSequence                 = HttpHeaderNames.CONTENT_LOCATION
  val `content-transfer-encoding`: CharSequence        = HttpHeaderNames.CONTENT_TRANSFER_ENCODING
  val `content-disposition`: CharSequence              = HttpHeaderNames.CONTENT_DISPOSITION
  val `content-md5`: CharSequence                      = HttpHeaderNames.CONTENT_MD5
  val `content-range`: CharSequence                    = HttpHeaderNames.CONTENT_RANGE
  val `content-security-policy`: CharSequence          = HttpHeaderNames.CONTENT_SECURITY_POLICY
  val `content-type`: CharSequence                     = HttpHeaderNames.CONTENT_TYPE
  val `cookie`: CharSequence                           = HttpHeaderNames.COOKIE
  val `date`: CharSequence                             = HttpHeaderNames.DATE
  val `dnt`: CharSequence                              = HttpHeaderNames.DNT
  val `etag`: CharSequence                             = HttpHeaderNames.ETAG
  val `expect`: CharSequence                           = HttpHeaderNames.EXPECT
  val `expires`: CharSequence                          = HttpHeaderNames.EXPIRES
  val `from`: CharSequence                             = HttpHeaderNames.FROM
  val `host`: CharSequence                             = HttpHeaderNames.HOST
  val `if-match`: CharSequence                         = HttpHeaderNames.IF_MATCH
  val `if-modified-since`: CharSequence                = HttpHeaderNames.IF_MODIFIED_SINCE
  val `if-none-match`: CharSequence                    = HttpHeaderNames.IF_NONE_MATCH
  val `if-range`: CharSequence                         = HttpHeaderNames.IF_RANGE
  val `if-unmodified-since`: CharSequence              = HttpHeaderNames.IF_UNMODIFIED_SINCE
  val `last-modified`: CharSequence                    = HttpHeaderNames.LAST_MODIFIED
  val `location`: CharSequence                         = HttpHeaderNames.LOCATION
  val `max-forwards`: CharSequence                     = HttpHeaderNames.MAX_FORWARDS
  val `origin`: CharSequence                           = HttpHeaderNames.ORIGIN
  val `pragma`: CharSequence                           = HttpHeaderNames.PRAGMA
  val `proxy-authenticate`: CharSequence               = HttpHeaderNames.PROXY_AUTHENTICATE
  val `proxy-authorization`: CharSequence              = HttpHeaderNames.PROXY_AUTHORIZATION
  val `range`: CharSequence                            = HttpHeaderNames.RANGE
  val `referer`: CharSequence                          = HttpHeaderNames.REFERER
  val `retry-after`: CharSequence                      = HttpHeaderNames.RETRY_AFTER
  val `sec-websocket-key1`: CharSequence               = HttpHeaderNames.SEC_WEBSOCKET_KEY1
  val `sec-websocket-key2`: CharSequence               = HttpHeaderNames.SEC_WEBSOCKET_KEY2
  val `sec-websocket-location`: CharSequence           = HttpHeaderNames.SEC_WEBSOCKET_LOCATION
  val `sec-websocket-origin`: CharSequence             = HttpHeaderNames.SEC_WEBSOCKET_ORIGIN
  val `sec-websocket-protocol`: CharSequence           = HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL
  val `sec-websocket-version`: CharSequence            = HttpHeaderNames.SEC_WEBSOCKET_VERSION
  val `sec-websocket-key`: CharSequence                = HttpHeaderNames.SEC_WEBSOCKET_KEY
  val `sec-websocket-accept`: CharSequence             = HttpHeaderNames.SEC_WEBSOCKET_ACCEPT
  val `sec-websocket-extensions`: CharSequence         = HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS
  val `server`: CharSequence                           = HttpHeaderNames.SERVER
  val `set-cookie`: CharSequence                       = HttpHeaderNames.SET_COOKIE
  val `set-cookie2`: CharSequence                      = HttpHeaderNames.SET_COOKIE2
  val `te`: CharSequence                               = HttpHeaderNames.TE
  val `trailer`: CharSequence                          = HttpHeaderNames.TRAILER
  val `transfer-encoding`: CharSequence                = HttpHeaderNames.TRANSFER_ENCODING
  val `upgrade`: CharSequence                          = HttpHeaderNames.UPGRADE
  val `upgrade-insecure-requests`: CharSequence        = HttpHeaderNames.UPGRADE_INSECURE_REQUESTS
  val `user-agent`: CharSequence                       = HttpHeaderNames.USER_AGENT
  val `vary`: CharSequence                             = HttpHeaderNames.VARY
  val `via`: CharSequence                              = HttpHeaderNames.VIA
  val `warning`: CharSequence                          = HttpHeaderNames.WARNING
  val `websocket-location`: CharSequence               = HttpHeaderNames.WEBSOCKET_LOCATION
  val `websocket-origin`: CharSequence                 = HttpHeaderNames.WEBSOCKET_ORIGIN
  val `websocket-protocol`: CharSequence               = HttpHeaderNames.WEBSOCKET_PROTOCOL
  val `www-authenticate`: CharSequence                 = HttpHeaderNames.WWW_AUTHENTICATE
  val `x-frame-options`: CharSequence                  = HttpHeaderNames.X_FRAME_OPTIONS
  val `x-requested-with`: CharSequence                 = HttpHeaderNames.X_REQUESTED_WITH

}
